    do{

        // reads and checks the TOP
        if(currentNode->readTopCharacter(env) == SYMBOL_EMPTY || currentNode->readTopCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if((openList->getLength() == 1) || (!currentNode->equalTo(openList->getNode(i)) && /*!currentNode->equalTo(nodesExplored->getNode(i)) && */checker == false)){
                    openList->addElement(new Node(currentNode->getRow()-1, currentNode->getCol(), currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Up node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        //reads and checks the BOTTOM
        if(currentNode->readBottomCharacter(env) == SYMBOL_EMPTY || currentNode->readBottomCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if((openList->getLength() == 1) || (!currentNode->equalTo(openList->getNode(i)) && /*!currentNode->equalTo(nodesExplored->getNode(i)) && */checker == false)){
                    openList->addElement(new Node(currentNode->getRow()+1, currentNode->getCol(), currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Down node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        //reads and checks the LEFT
        if(currentNode->readLeftCharacter(env) == SYMBOL_EMPTY || currentNode->readLeftCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if((openList->getLength() == 1) || (!currentNode->equalTo(openList->getNode(i)) && /*!currentNode->equalTo(nodesExplored->getNode(i)) && */checker == false)){
                    openList->addElement(new Node(currentNode->getRow(), currentNode->getCol()-1, currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Left node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        //reads and checks the RIGHT
        if(currentNode->readRightCharacter(env) == SYMBOL_EMPTY || currentNode->readRightCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if((openList->getLength() == 1) || (!currentNode->equalTo(openList->getNode(i)) && /*!currentNode->equalTo(nodesExplored->getNode(i)) && */checker == false)){
                    openList->addElement(new Node(currentNode->getRow(), currentNode->getCol()+1, currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Right node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        

        for(int i = 0; i < openList->getLength(); i++){

            if(openList->getNode(i)->getEstimatedDist2Goal(goalNode) <= currentNode->getEstimatedDist2Goal(goalNode) && 
                !nodesExplored->contains(openList->getNode(i)) ){
                startNode = openList->getNode(i);
            }

        }
        
        nodesExplored->addElement(currentNode);
        std::cout << "Current node: (" << currentNode->getCol() << "," << currentNode->getRow() << "," <<
                                currentNode->getDistanceTraveled() << ") added to closed list" << std::endl;
        
        currentNode = startNode;    
    }while(!nodesExplored->getNode(nodesExplored->getLength() - 1)->equalTo(goalNode) ); 
    std::cout << "You reached there!" << std::endl;








        do{


        // change this completely reeeeeeeeeee use contains and check if nodes explored contains

        // reads and checks the TOP
        if(currentNode->readTopCharacter(env) == SYMBOL_EMPTY || currentNode->readTopCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if(!currentNode->equalTo(openList->getNode(i)) && !nodesExplored->contains(currentNode->getTopNode(env)) && checker == false){
                    openList->addElement(new Node(currentNode->getRow()-1, currentNode->getCol(), currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Up node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        //reads and checks the BOTTOM
        if(currentNode->readBottomCharacter(env) == SYMBOL_EMPTY || currentNode->readBottomCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if(!currentNode->equalTo(openList->getNode(i)) && !nodesExplored->contains(currentNode->getBottomNode(env)) && checker == false){
                    openList->addElement(new Node(currentNode->getRow()+1, currentNode->getCol(), currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Down node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        //reads and checks the LEFT
        if(currentNode->readLeftCharacter(env) == SYMBOL_EMPTY || currentNode->readLeftCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if(!currentNode->equalTo(openList->getNode(i)) && !nodesExplored->contains(currentNode->getLeftNode(env)) && checker == false){
                    openList->addElement(new Node(currentNode->getRow(), currentNode->getCol()-1, currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Left node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        //reads and checks the RIGHT
        if(currentNode->readRightCharacter(env) == SYMBOL_EMPTY || currentNode->readRightCharacter(env) == SYMBOL_GOAL){
            bool checker = false;
            // loop to add to open list
            for(int i = 0; i < openList->getLength(); i++){
                // add the element
                if(!currentNode->equalTo(openList->getNode(i)) && !nodesExplored->contains(currentNode->getRightNode(env)) && checker == false){
                    openList->addElement(new Node(currentNode->getRow(), currentNode->getCol()+1, currentNode->getDistanceTraveled()+1));
                    //PRINT will remove later
                    std::cout << "Right node: (" << openList->getNode(openList->getLength()-1)->getCol() << "," << 
                            openList->getNode(openList->getLength()-1)->getRow() << ", " <<
                            openList->getNode(openList->getLength()-1)->getDistanceTraveled()  << ") added to open" << std::endl;
                    
                    checker = true;
                }
            }
        }

        

        for(int i = 0; i < openList->getLength(); i++){

            if(openList->getNode(i)->getEstimatedDist2Goal(goalNode) <= currentNode->getEstimatedDist2Goal(goalNode) && 
                !nodesExplored->contains(*(openList->getNode(i))) && /*!openList->contains(*(openList->getNode(0))*/ )){
                startNode = openList->getNode(i);
            }

        }
        
        nodesExplored->addElement(currentNode);
        std::cout << "Current node: (" << currentNode->getCol() << "," << currentNode->getRow() << "," <<
                                currentNode->getDistanceTraveled() << ") added to closed list" << std::endl;
        
        currentNode = startNode;    
    }while(!nodesExplored->getNode(nodesExplored->getLength() - 1)->equalTo(goalNode) ); 